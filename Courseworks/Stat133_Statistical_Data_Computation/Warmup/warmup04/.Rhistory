knitr::opts_chunk$set(echo = TRUE)
read_csv(readr_example("nba2018"))
read_csv(readr_example("nba2018"))
installed.packages(readr)
install.packages("readr")
read_csv(readr_example("nba2018"))
installed.packages("readr")
library(readr)
read_csv(readr_example("nba2018"))
library(readr)
read_csv(readr_example("nba2018.csv"))
read_csv?
library(readr)
read_csv("nba2018.csv")
read_csv("nba2018.csv", col_types = cols(player = character))
read_csv("nba2018.csv", col_types = cols(player = col_character()))
read_csv("nba2018.csv", col_types = cols(player = col_character(),
team = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c("C","PF", "PG", "SF", "SG"))
))
data = read_csv("nba2018.csv", col_types = cols(player = col_character(),
team = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c("C","PF", "PG", "SF", "SG"))
))
data = read_csv("nba2018.csv", col_types = cols(player = col_character(),
team = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c("C","PF", "PG", "SF", "SG"))
))
str(data)
data = read_csv("nba2018.csv", col_types = cols(player = col_character(),
team = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c("C","PF", "PG", "SF", "SG")),
salary = col_double(),
field_goals_perc = col_double(),
points3_perc = col_double(),
points2_perc = col_double(),
points1_perc = col_double(),
effective_field_goal_perc = col_double()
))
str(data)
data = read_csv("nba2018.csv", col_types = cols(player = col_character(),
team = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c("C","PF", "PG", "SF", "SG")),
salary = col_double(),
field_goals_perc = col_double(),
points3_perc = col_double(),
points2_perc = col_double(),
points1_perc = col_double(),
effective_field_goal_perc = col_double(),
salary = col_integer()
))
str(data)
experience
data$experience
data$experience[data$experience == "R"] = 0
data$experience
as.integer(data$experience)
data$experience = as.integer(data$experience)
data$experience
summary(data$experience)
#Salary converted into millions
data$salary / 1000000
#Salary converted into millions
data$salary = data$salary / 1000000
summary(data$salary)
levels(data$position)
levels(data$position) <- c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard")
table(data$position)
data$college == "University of California, Los Angeles"
data$college
sum(data$college == "University of California, Los Angeles")
data$college == "University of California, Los Angeles"
data$college[data$college == "University of California, Los Angeles"]
data$college[data$college == "University of California, Los Angeles" & data$college != NA]
data$college[data$college == "University of California, Los Angeles" & data$college != "NA"]
data$college[data$college == "University of California, Los Angeles" & is.na(data$college) == FALSE]
length(data$college[data$college == "University of California, Los Angeles" & is.na(data$college) == FALSE])
#How many players went to Cal (“University of California, Berkeley”)?
length(data$college[data$college == "University of California, Berkeley" & is.na(data$college) == FALSE])
#What’s the largest weight value?
max(data$weight)
#Who are the players with the largest weight value?
data$player[data$weight == max(data$weight)]
#What’s the overall average weight?
mean(data$weight)
#What is the median salary of all players?
median(data$salary)
#What is the median salary of the players with 10 years of experience or more?
median(data$salary[experience >= 10])
#What is the median salary of the players with 10 years of experience or more?
median(data$salary[data$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(data$salary[data$position == "shoot_guard"] or data$position == "point_guard")
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(data$salary[data$position == "shoot_guard"] | data$position == "point_guard"])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
data[c(data$team == "GSW") ,]
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
data[c(data$team == "GSW") , c(1,4,5,6,13)]
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw = data[c(data$team == "GSW") , c(1,4,5,6,13)]
#How many players went to UCLA (“University of California, Los Angeles”)?
length(data$college[data$college == "University of California, Los Angeles" & is.na(data$college) == FALSE])
#How many players went to Cal (“University of California, Berkeley”)?
length(data$college[data$college == "University of California, Berkeley" & is.na(data$college) == FALSE])
#What’s the largest weight value?
max(data$weight)
#Who are the players with the largest weight value?
data$player[data$weight == max(data$weight)]
#What’s the overall average weight?
mean(data$weight)
#What is the median salary of all players?
median(data$salary)
#What is the median salary of the players with 10 years of experience or more?
median(data$salary[data$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw = data[c(data$team == "GSW") , c(1,4,5,6,13)]
gsw
#Add the following variables
##missed_field_goals (missed field goals)
data$field_goals_atts - data$field_goals
#Add the following variables
##missed_field_goals (missed field goals)
data["missed_field_goals"] <- NA
data$missed_filed_goals <- data$field_goals_atts - data$field_goals
data$missed_field_goals <- data$field_goals_atts - data$field_goals
rm(data$missed_filed_goals)
data$data$missed_filed_goals <- NULL
data$missed_filed_goals <- NULL
#Add the following variables
##missed_field_goals (missed field goals)
data["missed_field_goals"] <- NA
data$missed_field_goals <- data$field_goals_atts - data$field_goals
##missed_free_throws (missed free throws)
data["missed_free_throws"] <- NA
data$missed_free_throws <- data$points1_atts - data$points1
##rebounds (total rebounds: offensive and defensive)
data["rebounds"] <- NA
data$rebounds <- data$off_rebounds + data$def_rebounds
##mins_game (minutes per game; NOT to be used when calculating EFF)
data["mins_game"] <- NA
data$mins_game <- data$minutes / data$games
eff = (data$points + data$total_rebounds + data$assists + data$steals + data$blocks - data$missed_field_goals - data$missed_free_throws - data$turnovers) / data$games
eff
eff = (data$points + data$total_rebounds + data$assists + data$steals + data$blocks - data$missed_field_goals - data$missed_free_throws - data$turnovers) / data$games
data["efficiency"] <- NA
data$efficiency <- eff
summary(data$efficiency)
hist(data$efficiency, main="Distribution of Player Efficiency")
hist(data$efficiency, main="Distribution of Player Efficiency", col)
color.hist(data$efficiency, main="Distribution of Player Efficiency", col)
color.hist(data$efficiency, main="Distribution of Player Efficiency")
color.hist(data$efficiency, main="Distribution of Player Efficiency", col = "black", "cyon", "red", "green")
hist(data$efficiency, main="Distribution of Player Efficiency", col = "black", "cyon", "red", "green")
hist(data$efficiency, main="Distribution of Player Efficiency")
hist(data$efficiency, main="Distribution of Player Efficiency", , col = "black", "cyon", "red", "green", "blue", "orange", "purple")
hist(data$efficiency, main="Distribution of Player Efficiency", , col = c("black", "cyon", "red", "green", "blue", "orange", "purple")
hist(data$efficiency, main="Distribution of Player Efficiency", , col = c("black", "cyon", "red", "green", "blue", "orange", "purple"))
hist(data$efficiency, main="Distribution of Player Efficiency", col = c("black", "cyon", "red", "green", "blue", "orange", "purple"))
hist(data$efficiency, main="Distribution of Player Efficiency", col = c("black", "gray", "red", "green", "blue", "orange", "purple"))
hist(data$efficiency, main="Distribution of Player Efficiency", col = c("black", "gray", "red", "green", "blue", "orange", "purple", "yellow"))
hist(data$efficiency, main="Distribution of Player Efficiency", col = c("black", "gray", "red", "green", "blue", "orange", "purple", "yellow"), xlab="player efficiency")
data[sort(data$efficiency),]
data[order(data$efficiency),]
data[order(data$efficiency, decreasing = TRUE),]
data[order(data$efficiency, decreasing = TRUE),][10,]
data[order(data$efficiency, decreasing = TRUE),][,10]
data[order(data$efficiency, decreasing = TRUE),][10,]
data[order(data$efficiency, decreasing = TRUE),][c(1:10),]
data[order(data$efficiency, decreasing = TRUE),][c(1:10),][c("player"),]
data[order(data$efficiency, decreasing = TRUE),][c(1:10),][,c("player")]
data[order(data$efficiency, decreasing = TRUE),][c(1:10),][,c("player", "team", "salary", "efficiency")]
#players with a negative EFF
data[order(data$efficiency)]
#players with a negative EFF
data[order(data$efficiency),]
#players with a negative EFF
data[order(data$efficiency),][data$efficiency < 0]
#players with a negative EFF
data[order(data$efficiency),][data$efficiency < 0,]
#players with a negative EFF
data[data$efficiency < 0,]
#players with a negative EFF
data[data$efficiency < 0,][, c("player")]
#players with a negative EFF
data[data$efficiency < 0,]
#players with a negative EFF
data[data$efficiency < 0,][, c("player")]
plot(data$efficiency, data$salary)
plot(data$efficiency, data$salary, log = xy)
plot(data$efficiency, data$salary, log=xy)
plot(efficiency~salary, data = data ,log=xy)
plot(efficiency~salary, data = data ,log= "xy")
plot(efficiency~salary, data = data ,log= "x")
plot(efficiency~salary, data = data ,log= "y")
plot(efficiency~salary, data = data ,log= "xy")
#As players get older, do they tend to become more efficient?
plot(efficiency~age, data = data)
#As players get older, do they tend to become more efficient?
plot(efficiency~age, data = data, log="xy")
#As players get older, do they tend to become more efficient?
plot(efficiency~age, data = data)
#Does the rank of a player seem to be associated with his efficiency (i.e. the more importnat the rank, the more efficient)?
plot(rank~efficiency, data = data)
#Does the rank of a player seem to be associated with his efficiency (i.e. the more importnat the rank, the more efficient)?
plot(rank~efficiency, data = data, log="xy")
#Does the rank of a player seem to be associated with his efficiency (i.e. the more importnat the rank, the more efficient)?
plot(rank~efficiency, data = data, log="x")
#Does the rank of a player seem to be associated with his efficiency (i.e. the more importnat the rank, the more efficient)?
plot(rank~efficiency, data = data)
