names = unlist(new_house[1,])
names
names = as.vector(new_house[1,])
names
names = as.vector(new_house[1,])
names
names = unname(unlist((new_house[1,])))
names
names = unname(unlist((new_house[1,])))
names
colnames(new_house) = names
names = unname(unlist((new_house[1,])))
names
colnames(new_house) = names
new_house
names = unname(unlist((new_house[1,])))
names
colnames(new_house) = names
new_house = new_house[-1,]
new_house
language = en
language = EN
summary(num_price)
num_price = as.numeric(as.character(house$V1))[-1]
summary(num_price)
hist(num_price)
# log transformation looks more symmetric.
log_price <- log(num_price)
hist(log_price)
pwd()
wd()
knitr::opts_chunk$set(echo = TRUE)
read.csv("nba2018.csv", header = TRUE)
data = read.csv("nba2018.csv", header = TRUE)
data = read.csv("nba2018.csv", header = TRUE)
str(data)
#Import the data using read_csv() and use str() to display its structure
read_csv("nba2018.csv")
install.packages("readr")
#Import the data using read_csv() and use str() to display its structure
read_csv("nba2018.csv")
#Import the data using read_csv() and use str() to display its structure
read_csv(readr_example("nba2018")
#Import the data using read_csv() and use str() to display its structure
read_csv(readr_example("nba2018"))
read_csv(readr_example("nba2018"))
install.packages("tidyverse")
read_csv(readr_example("nba2018"))
library(tidyverse)
read_csv(readr_example("nba2018"))
install.packages(c("dplyr", "ggplot2"))
knitr::opts_chunk$set(echo = TRUE, fig.path = '../images/')
library(dplyr)
library(ggplot2)
dat <- dat <- read.csv('nba2018-players.csv', stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
dat <- dat <- read.csv('../data/nba2018-players.csv', stringsAsFactors = FALSE)
#use slice() to subset the data by selecting the first 5 rows.
slice(dat, 1:5)
seq(10, 50, 5)
#use slice() to subset the data by selecting rows 10, 15, 20, …, 50.
slice(dat, seq(10,50,5))
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, (n()-4 : n())
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, (n()-4 : n())
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, (-1: (-n()+4))
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, 1:n())
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, length(dat$player)-4 : length(dat$player)
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, (length(dat$player)-4):length(dat$player)
length(dat$player)
#use slice() to subset the data by selecting the last 5 rows.
slice(dat, (length(dat$player)-4):length(dat$player))
#use filter() to subset those players with height less than 70 inches tall.
filter(dat, height < 70)
#use filter() to subset rows of Golden State Warriors (‘GSW’).
filter(dat, team == 'GSW')
#use filter() to subset rows of GSW centers (‘C’).
filter(dat, team == 'GSW' & position == 'C')
#use filter() and then select(), to subset rows of lakers (‘LAL’), and then display their names.
select(filter(dat, team == 'LAL'), player)
#use filter() and then select(), to display the name and salary, of GSW point guards
select(filter(dat, team == 'GSW' & position == 'PG'), player, salary)
#find how to select the name, age, and team, of players with more than 10 years of experience, making 10 million dollars or less.
select(filter(dat, experience > 10 & salary <= 10000000), player, age, team)
#find how to select the name, team, height, and weight, of rookie players, 20 years old, displaying only the first five occurrences (i.e. rows)
slice(select(filter(dat, age == 20), player, team, height, weight), 1:5)
# creating a small data frame step by step
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
gsw
mutate(gsw, height/weight)
mutate(gsw, ht_wt = height/weight)
arrange(gsw, height)
arrange(gsw, desc(height))
#using the data frame gsw, add a new variable product with the product of height and weight.
mutate(gsw, product = height*weight)
#create a new data frame gsw3, by adding columns log_height and log_weight with the log transformations of height and weight.
gsw3(gsw, log_height = log(height), log_weight = log(weight))
#create a new data frame gsw3, by adding columns log_height and log_weight with the log transformations of height and weight.
gsw3 <- mutate(gsw, log_height = log(height), log_weight = log(weight))
gsw3
#use the original data frame to filter() and arrange() those players with height less than 71 inches tall, in increasing order.
arrange(filter(dat, height <= 71), height)
#display the name, team, and salary, of the top-5 highest paid players
select(arrange(select(dat, player, team, salary), salary). 1:5)
#display the name, team, and salary, of the top-5 highest paid players
select(arrange(select(dat, player, team, salary), salary), 1:5)
#display the name, team, and salary, of the top-5 highest paid players
arrange(select(dat, player, team, salary), desc(salary))
#display the name, team, and salary, of the top-5 highest paid players
filter(arrange(select(dat, player, team, salary), desc(salary)), 1:5)
#display the name, team, and salary, of the top-5 highest paid players
slice(arrange(select(dat, player, team, salary), desc(salary)), 1:5)
#display the name, team, and points3, of the top 10 three-point players
slice(select(arrange(dat, desc(points3)), player, team, point3), 1:10)
#display the name, team, and points3, of the top 10 three-point players
slice(select(arrange(dat, desc(dat$points3)), player, team, point3), 1:10)
#display the name, team, and points3, of the top 10 three-point players
slice(select(arrange(dat, desc(points3)), player, team, points3), 1:10)
#create a data frame gsw_mpg of GSW players, that contains variables for player name, experience, and min_per_game (minutes per game), sorted by min_per_game (in descending order)
gsw_mpg <- arrange(select(mutate(dat, min_per_game = minutes / games), player, experience, min_per_game), desc(min_per_game))
gsw_mpg
summarise(largest_height = max(height))
summarise(dat, largest_height = max(height))
#use summarise() to get the standard deviation of points3.
summarise(dat, sd_of_points3 = sd(points3))
#use summarise() and group_by() to display the median of three-points, by team.
summarise(group_by(data, team), points3_median = median(points3))
#use summarise() and group_by() to display the median of three-points, by team.
summarise(group_by(dat, team), points3_median = median(points3))
#display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
arrange(summarise(group_by(dat, team), points3_avg = mean(points)), points3_avg)
#display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
slice(
arrange(
summarise(
group_by(dat, team),
points3_avg = mean(points)),
points3_avg), 1:5)
#obtain the mean and standard deviation of age, for Power Forwards, with 5 and 10 years (including) years of experience.
summarise(filter(dat, experience >= 5 & experience <= 10 & position == 'PF'), mean = mean(age), sd = sd(age))
sd(dat$age)
mean(dat$age)
ggplot(data = gsw, aes(x = height, y = weight) ) + geom_point()
ggplot(data = gsw, aes(x = height, y = weight) ) + geom_point() + geom_text(aes(label = player))
#Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players.
ggplot(data = gsw, aes(x = height, y = weight) ) + geom_text(aes(label = player))
+ geom_point()
#Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players.
ggplot(data = gsw, aes(x = height, y = weight) ) + geom_point() + geom_text(aes(label = player))
#Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label()
ggplot(data = filter(dat, team = 'GSW'), aes(x = height, y = weight)) + geom_label(aes(label = player))
#Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label()
ggplot(data = filter(dat, team == 'GSW'), aes(x = height, y = weight)) + geom_label(aes(label = player))
ggplot(data = dat, aes(x = salary, y = player)) + geom_density()
ggplot(data = dat, aes(x = salary) + geom_density()
ggplot(data = dat, aes(salary) + geom_density()
ggplot(data = dat, aes(salary)) + geom_density()
#Get a histogram of points2 with binwidth of 50 (for all NBA players).
ggplot(data = dat, aes(points2)) + geom_histogram(binwidth = 50)
#Get a barchart of the position frequencies (for all NBA players).
ggplot(data = dat, aes(position)) + geom_bar()
ggplot(data = filter(dat, position == 'C'), aes(x = experience, y = salary)) + geom_point() + geom_smooth()
ggplot(data = filter(dat, position == 'C'), aes(x = experience, y = salary)) + geom_point() + geom_smooth(method = loess)
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = filter(dat, position == 'C'), aes(x = experience, y = salary)) + geom_point() + geom_smooth(method=lm)
#Make scatterplots of experience and salary faceting by position
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + facet_wrap(~ position)
#Make scatterplots of experience and salary faceting by team
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + facet_wrap(~ team)
#Make scatterplots of height and weight faceting by position
ggplot(data = dat, aes(x = height, y = weight)) + geom_point() + facet_wrap(~ position)
#Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
ggplot(data = dat, aes(x = height, y = weight)) + geom_point() + facet_wrap(~ position) + geom_density2d()
#Make a scatterplot of experience and salary for the Warriors, but this time add a layer with theme_bw() to get a simpler background
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + theme_bw()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + theme_minimal()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + theme_classic()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + theme_dark()
x <- c(2,4,6,8)
names(x) <- letters[1:3]
names(x)
x[x ==2]
x["a"]
x[rep("a", 5)]
x[True]
x[TRUE]
x[as.logical(c(0,1, pi, -10))]
x[-10]
as.logical(c(0,1, pi, -10))
choose(10, 3)
size <- c("sm", "md", "lg", "md")
size <- factor(size)
size
lst <- list(  c(1, 2, 3),  matrix(1:9, nrow = 3, ncol = 3),  list(1:2, c(TRUE, FALSE), c("a", "b")) )
lst[[3]][1]
list[[3]][[1]]
lst[[3]][[1]]
lst[[3]][1][1]
lst[[3]][1][1]
lst[[3]][1][1]
lst[[3]][1][2]
lst[[3]][[1]][2]
lst[3]
lst[1]
lst <- list(  vec = c(1, 2, 3),  mat = matrix(1:9, nrow = 3, ncol = 3),  lis = list(1:2, c(TRUE, FALSE), c("a", "b")) )
lst$lis[1]
lst$lis[1][1]
lst$lis[[1]][1]
str(dat, vec.len = 1)
summary(dat)
size(dat)
object.size(dat)
attributes(dat)
class(dat)
dat$point3[TRUE]
lst[[2,3]]
dat[points]
dat['points']
dat['points', drop=FALSE]
setwd("C:/Users/DooDoo/Desktop/Stat133/lab06/code")
read
read_csv("../data/nba2018-players.csv")
# packages
library(readr)    # importing data
library(dplyr)    # data wrangling
library(ggplot2)  # graphics
read_csv("../data/nba2018-players.csv")
data = read_csv("../data/nba2018-players.csv")
# packages
library(readr)    # importing data
# packages
library(readr)    # importing data
library(dplyr)    # data wrangling
library(ggplot2)  # graphics
data = read_csv("../data/nba2018-players.csv")
filter(data, team == "GSW")
warriors = filter(data, team == "GSW")
?write.csv
write.csv(warriors, "file = ../data/warriors.csv", row.names = TRUE)
write.csv(warriors, file = "../data/warriors.csv", row.names = TRUE)
lakers = filter(data, team == "GSW")
write_csv(lakers, ../data/lakers/csv)
write_csv(lakers, ../data/lakers.csv)
write_csv(lakers, "../data/lakers.csv")
write.csv(warriors, file = "../data/warriors.csv", row.names = FALSE)
str(data)
sink(file = '../output/data-structure.txt')
str(data)
sink()
sink(file = '../output/summary-warriors.txt')
summary(warriors)
sink()
sink(file = '../output/summary-lakers.txt')
summary(lakers)
sink()
?png()
plot(dat$height, dat$weight, pch = 20,
xlab = 'Height', ylab = 'Height')
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
png(filename = "../images/scatterplot-height-weight.png")
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
?png()
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight', res = 100)
png(filename = "../images/scatterplot-height-weight-HD.png", res = 100)
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
png(filename = "../images/scatterplot-height-weight-HD.png", res = 200)
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
png(filename = "../images/scatterplot-height-weight-HD.png", res = 100)
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
?png()
png(filename = "../images/scatterplot-height-weight-HD.png", res = 150)
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
png(filename = "../images/scatterplot-height-weight-HD.png", res = 150)
warnings()
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
?hist()
hist(data$age)
?hist()
?jpeg()
jpeg(filename = "../images/histogram-age.jpeg", width = 600, height = 400)
hist(data$age)
dev.off()
?pdf()
pdf(file = "../images/histogram-age.pdf", width = 7, height = 5)
hist(data$age)
dev.off()
ggplot(data = data, aes(x=points, y=salary)) +
geom_point()
data = data, aes(x=points, y=salary)) + geom_point()
gg_pts_salry = ggplot(data = data, aes(x=points, y=salary)) + geom_point()
x=points, y=salary)) + geom_point()
gg_pts_salry = ggplot(data = data, aes(x=points, y=salary)) + geom_point()
gg_pts_salary = ggplot(data = data, aes(x=points, y=salary)) + geom_point()
View(gg_pts_salry)
View(gg_pts_salry)
ggsave?
ggsave?
?ggsave()
ggsave("points_salary.pdf", plot = gg_pts_salary, path = "../images" , width = 7, height = 5)
gg_ht_wt_positions =
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
gg_ht_wt_positions =
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
gg_ht_wt_positions =
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
gg_ht_wt_positions =
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
ggsave("height_weight_by_position.pdf",
plot = gg_pts_salary, path = "../images" , width = 6, height = 4)
ggsave("height_weight_by_position.pdf",
plot = gg_ht_wt_positions, path = "../images" , width = 6, height = 4)
#display the player names of Lakers 'LAL'.
data %>% filter(team == "LAL") %>% select(player)
#display the name and salary of GSW point guards ‘PG’.
data %>% filter(position = 'PG') %>% select(player, salary)
#display the name and salary of GSW point guards ‘PG’.
data %>% filter(position == 'PG') %>% select(player, salary)
#dislay the name, age, and team, of players with more than
#10 years of experience, making 10 million dollars or less.
data %>% filter(experience > 10, salary <= 10000000) %>% select(player, age, team)
#select the name, team, height, and weight, of rookie players,
#20 years old, displaying only the first five occurrences (i.e. rows).
data$experience
#select the name, team, height, and weight, of rookie players,
#20 years old, displaying only the first five occurrences (i.e. rows).
data %>% filter(experience == 0) %>% select(player, team, height, weight) %>% head()
#select the name, team, height, and weight, of rookie players,
#20 years old, displaying only the first five occurrences (i.e. rows).
data %>% filter(experience == 0) %>% select(player, team, height, weight) %>% head(5)
#create a data frame gsw_mpg of GSW players, that contains
#variables for player name, experience, and min_per_game
#(minutes per game), sorted by min_per_game (in descending order).
data %>% arrange(desc(min_per_game))
#create a data frame gsw_mpg of GSW players, that contains
#variables for player name, experience, and min_per_game
#(minutes per game), sorted by min_per_game (in descending order).
data %>% mutate(min_per_game = minutes / games)
#create a data frame gsw_mpg of GSW players, that contains
#variables for player name, experience, and min_per_game
#(minutes per game), sorted by min_per_game (in descending order).
data %>% mutate(min_per_game = minutes / games) %>%
arrange(desc(min_per_game)) %>% select(player, experience, min_per_game)
#create a data frame gsw_mpg of GSW players, that contains
#variables for player name, experience, and min_per_game
#(minutes per game), sorted by min_per_game (in descending order).
gsw_mpg = data %>% mutate(min_per_game = minutes / games) %>%
arrange(desc(min_per_game)) %>% select(player, experience, min_per_game)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summary(avg_points3 = mean(points))
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points))
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points3))
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points3)) %>% tail(5)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points3))
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points3)) %>% arrange(avg_point3)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>% summarise(avg_points3 = mean(points3)) %>% arrange(avg_points3)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>%
summarise(avg_points3 = mean(points3)) %>%
arrange(avg_points3) %>% tail(5)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>%
summarise(avg_points3 = mean(points3)) %>%
arrange(avg_points3)
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>%
summarise(avg_points3 = mean(points3)) %>%
arrange(avg_points3) %>% head(5)
#obtain the mean and standard deviation of age, for
#Power Forwards, with 5 and 10 years (including) of experience.
data %>% filter(experience <= 10, experience >= 5, position = "PF") %>%
summarise(mean_age = mean(age), sd_age = sd(age))
#obtain the mean and standard deviation of age, for
#Power Forwards, with 5 and 10 years (including) of experience.
data %>% filter(experience <= 10, experience >= 5, position == "PF") %>%
summarise(mean_age = mean(age), sd_age = sd(age))
# Use the imported tibble to create a data frame warriors by
# selecting rows—e.g. filter()—of Golden State Warriors,
# arranging rows by salary in increasing order.
warriors = arrange(filter(data, team == "GSW"), salary)
write.csv(warriors, file = "../data/warriors.csv", row.names = FALSE)
# Create another data frame lakers by selecting rows of Los Angeles Lakers,
# this time arranging rows by experience (decreasingly).
lakers = arrange(filter(data, team == "GSW"), desc(experience))
write_csv(lakers, "../data/lakers.csv")
# packages
library(readr)    # importing data
library(dplyr)    # data wrangling
library(ggplot2)  # graphics
# Use read_csv() from the package "readr"
# to import the data nba2018-players.csv in R
data = read_csv("../data/nba2018-players.csv")
# Use the imported tibble to create a data frame warriors by
# selecting rows???e.g. filter()???of Golden State Warriors,
# arranging rows by salary in increasing order.
warriors = arrange(filter(data, team == "GSW"), salary)
# Use the function write.csv() to export (or save) the data frame warriors
write.csv(warriors, file = "../data/warriors.csv", row.names = FALSE)
# Create another data frame lakers by selecting rows of Los Angeles Lakers,
# this time arranging rows by experience (decreasingly).
lakers = arrange(filter(data, team == "GSW"), desc(experience))
# Now use the function write_csv() to export (or save) the data frame lakers
write_csv(lakers, "../data/lakers.csv")
# Export the output of str() on the data frame with all the players.
sink(file = '../output/data-structure.txt')
str(data)
sink()
# Export the summary() of the entire data frame warriors
# to a text file summary-warriors.txt
sink(file = '../output/summary-warriors.txt')
summary(warriors)
sink()
# Export another summary() of the entire data frame lakers
# to a text file summary-lakers.txt
sink(file = '../output/summary-lakers.txt')
summary(lakers)
sink()
# Open the help documentation of png() and related graphic devices.
?png()
# Use png() to save a scatterplot of height and weight with plot().
# Save the graph in the images/ folder.
png(filename = "../images/scatterplot-height-weight.png")
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
# Save another version of the scatterplot between height and weight,
# but now try to get an image with higher resolution. Save the plot in images/.
png(filename = "../images/scatterplot-height-weight-HD.png", width = 1920, height = 1080)
plot(data$height, data$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
# Save a histogram in JPEG format of age with dimensions
# (width x height) 600 x 400 pixels. Save the plot in images/.
jpeg(filename = "../images/histogram-age.jpeg", width = 600, height = 400)
hist(data$age)
dev.off()
# Use pdf() to save the previous histogram of age in PDF format,
# with dimensions (width x height) 7 x 5 inches.
pdf(file = "../images/histogram-age.pdf", width = 7, height = 5)
hist(data$age)
dev.off()
gg_pts_salary = ggplot(data = data, aes(x=points, y=salary)) + geom_point()
gg_ht_wt_positions =
ggplot(data = data, aes(x=points, y=salary)) + geom_point() + facet_wrap(~position)
ggsave("height_weight_by_position.pdf",
plot = gg_ht_wt_positions, path = "../images" , width = 6, height = 4)
#display the player names of Lakers 'LAL'.
data %>% filter(team == "LAL") %>% select(player)
ggsave("points_salary.pdf", plot = gg_pts_salary, path = "../images" , width = 7, height = 5)
#display the name and salary of GSW point guards ‘PG’.
data %>% filter(position == 'PG') %>% select(player, salary)
#dislay the name, age, and team, of players with more than
#10 years of experience, making 10 million dollars or less.
data %>% filter(experience > 10, salary <= 10000000) %>% select(player, age, team)
#select the name, team, height, and weight, of rookie players,
#20 years old, displaying only the first five occurrences (i.e. rows).
data %>% filter(experience == 0) %>% select(player, team, height, weight) %>% head(5)
#create a data frame gsw_mpg of GSW players, that contains
#variables for player name, experience, and min_per_game
#(minutes per game), sorted by min_per_game (in descending order).
gsw_mpg = data %>% mutate(min_per_game = minutes / games) %>%
arrange(desc(min_per_game)) %>% select(player, experience, min_per_game)
#obtain the mean and standard deviation of age, for
#Power Forwards, with 5 and 10 years (including) of experience.
data %>% filter(experience <= 10, experience >= 5, position == "PF") %>%
summarise(mean_age = mean(age), sd_age = sd(age))
#display the average triple points by team, in ascending
#order, of the bottom-5 teams (worst 3pointer teams).
data %>% select(team, points3) %>% group_by(team) %>%
summarise(avg_points3 = mean(points3)) %>%
arrange(avg_points3) %>% head(5)
