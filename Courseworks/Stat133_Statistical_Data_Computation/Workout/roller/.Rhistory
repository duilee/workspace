count = countin,
prop = countin / x$total)
result <- list(freqs = df)
class(result) <- 'summary.rolls'
result
}
check_prob(c('dui', 'lee'))
check_prob(c('dui', 1))
device( sides = c('i', 'ii', 'iii', 'iv'), prob = rep(1/4, 4))
check_times('dui')
'dui' < 1
mode('dui')
mode(1)
#' @title roll
#' @describtion takes a device and a number of times and return rolls
#' @param x object of class "device"
#' @param times number of times to roll the device (default = 1)
#' @return a list of rolls, sides, prob, total
#' @export
roll <- function(x, times = 1) {
if (!is.device(x)) {
stop("\n'roll()' requires an object 'device'")
}
check_times(times)
outp <- list(rolls = sample(x$side, size = times, replace = TRUE, prob = x$prob),
sides = x$side,
prob = x$prob,
total = times)
class(outp) <- 'rolls'
outp
}
#check validity of times
check_times <- function(times) {
if (mode(times) == "numeric") {
stop("\n'times' must be a numeric value")
}
if (times < 1) {
stop("\n'times' must be a vector of length greater than 1")
}
}
#print method for toll
print.rolls <- function(x) {
cat('object "rolls"\n\n')
print(x$rolls)
invisible(x)
}
check_times('dui')
#' @title roll
#' @describtion takes a device and a number of times and return rolls
#' @param x object of class "device"
#' @param times number of times to roll the device (default = 1)
#' @return a list of rolls, sides, prob, total
#' @export
roll <- function(x, times = 1) {
if (!is.device(x)) {
stop("\n'roll()' requires an object 'device'")
}
check_times(times)
outp <- list(rolls = sample(x$side, size = times, replace = TRUE, prob = x$prob),
sides = x$side,
prob = x$prob,
total = times)
class(outp) <- 'rolls'
outp
}
#check validity of times
check_times <- function(times) {
if (mode(times) != "numeric") {
stop("\n'times' must be a numeric value")
}
if (times < 1) {
stop("\n'times' must be a vector of length greater than 1")
}
}
#print method for toll
print.rolls <- function(x) {
cat('object "rolls"\n\n')
print(x$rolls)
invisible(x)
}
check_times('dui')
class(device()) == 'device'
demodev <- device()
demodev
roll(device)
roll(demodev)
roll(demodev, times = 10)
demoroll <- roll(demodev, times = 10)
demoroll
summary(demoroll)
demosummary <- summary(demoroll)
demosummary$freqs
plot(demoroll)
demoroll[2]
demoroll[2] <- 1
demoroll[2]
demoroll[2] <- 1
demoroll[2]
demoroll[2]
demoroll[2] <- 1
demoroll[2]
#' @title roll replacement method
#' @describtion replacement method to replace the value of a given roll
#' @param x object of class "rolls"
#' @param i index of the rolls to be changed
#' @param value new value to be inputted
#' @return new rolls with replaced value
#' @export
"[<-.rolls" <- function(x, i, value) {
if (i > x$total) {
stop("\nGiven index is out of range")
}
if (sum(value == x$sides) == 0) {
stop("\nGiven value is invalid choice of side")
}
x$rolls[i] <- value
newroll <- list(rolls = x$rolls,
sides = x$sides,
prob = x$prob,
total = x$total
)
class(newroll) <- "rolls"
newroll
}
#' @title roll extraction method
#' @describtion extract the value of given index in the rolls
#' @param x object of class "rolls"
#' @param i index of the rolls to be changed
#' @return value of the rolls at the given index
#' @export
"[.rolls" <- function(x, i) {
x$rolls[i]
}
#' @title roll addition method
#' @describtion addition method to add more rolls
#' @param x object of class "rolls"
#' @param n n more times to be added to the rolls
#' @return new 'rolls' object with added rolls
#' @export
"+.rolls" <- function(x, n) {
if (n <= 0) {
stop("\ninvalid value. Must be positive")
}
dev <- device(x$sides, x$prob)
more_rolls <- roll(dev, n)
new_roll <- list(rolls = c(x$rolls, more_rolls$rolls),
sides = x$sides,
prob = x$prob,
total = x$total + n)
class(new_roll) <- 'rolls'
new_roll
}
demoroll[2] <- 1
demoroll[2]
demoroll[2]
demoroll[2] <- 2
demoroll <- roll(demodev, times = 10)
demoroll
demoroll[2]
demoroll[2] <- 1
demoroll[2]
demoroll[2] <- 2
demoroll[2]
knitr::opts_chunk$set(collapse = T, comment = "#>")
library(roller)
demodev <- device()
demodev
roll(demodev)
demoroll <- roll(demodev, times = 10)
demoroll
demoroll$rolls
demoroll$sides
demoroll$prob
demoroll$total
summary(demoroll)
demosummary <- summary(demoroll)
demosummary$freqs
plot(demoroll)
demoroll[2]
demoroll[2] <- 2
demoroll[2]
demoroll[2] <- 1
demoroll[2]
demoroll + 10
library(roller)
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
library(roller)
#' @title roll replacement method
#' @describtion replacement method to replace the value of a given roll
#' @param x object of class "rolls"
#' @param i index of the rolls to be changed
#' @param value new value to be inputted
#' @return new rolls with replaced value
#' @export
"[<-.rolls" <- function(x, i, value) {
if (i > x$total) {
stop("\nGiven index is out of range")
}
if (sum(value == x$sides) == 0) {
stop("\nGiven value is invalid choice of side")
}
x$rolls[i] <- value
newroll <- list(rolls = x$rolls,
sides = x$sides,
prob = x$prob,
total = x$total
)
class(newroll) <- "rolls"
newroll
}
#' @title roll extraction method
#' @describtion extract the value of given index in the rolls
#' @param x object of class "rolls"
#' @param i index of the rolls to be changed
#' @return value of the rolls at the given index
#' @export
"[.rolls" <- function(x, i) {
x$rolls[i]
}
#' @title roll addition method
#' @describtion addition method to add more rolls
#' @param x object of class "rolls"
#' @param n n more times to be added to the rolls
#' @return new 'rolls' object with added rolls
#' @export
"+.rolls" <- function(x, n) {
if (n <= 0) {
stop("\ninvalid value. Must be positive")
}
dev <- device(x$sides, x$prob)
more_rolls <- roll(dev, n)
new_roll <- list(rolls = c(x$rolls, more_rolls$rolls),
sides = x$sides,
prob = x$prob,
total = x$total + n)
class(new_roll) <- 'rolls'
new_roll
}
# =====================================================
# Devtools workflow
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
devtools::check()             # comprehensive check (optional)
install.packages('devtools')
library(devtools)
# =====================================================
# Devtools workflow
#library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
devtools::check()             # comprehensive check (optional)
devtools::test()              # run tests
devtools::test()              # run tests
devtools::test()              # run tests
devtools::test()              # run tests
devtools::test()              # run tests
devtools::test()              # run tests
# =====================================================
# Devtools workflow
#library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
devtools::check()             # comprehensive check (optional)
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
dice <- device(sides = c(1,2,3,4,5,6), prob = rep(1/6, 6)
#' @title device
#' @description creates a coin device
#' @param sides vector of k>=2 elements, by default numbers 1 and 2
#' @param prob vector of probabilities for each side (all equal to 1/2 by default)
#' @return creates a coin with given sides and probabilities
#' @export
#' @examples
#' #default
#' dev <- device()
#'
#' #typical die
#' dice <- device(sides = c(1,2,3,4,5,6), prob = rep(1/6, 6)
#'
#' #unfair coin
#' coin <- device(sides = c('head', 'tail'), prob = c(0.3, 0.7))
device <- function(sides = c(1,2), prob = rep(1/2, length(sides))) {
if (length(sides) != length(prob)) {
stop("\n'sides' and 'prob' have difference lengths")
}
check_sides(sides)
check_prob(prob)
coin <- list(side = sides, prob = prob)
class(coin) = 'device'
coin
}
#' @title check sides
#' @description checks the validity of the argument sides. sides must be a vecotr with more than one element with no duplicates
#' @param x vector with each side element
#' @return returns boolean value of whether given sides are valid side values
check_sides <- function(x) {
if (length(x) < 2) {
stop("\n'sides' must be a vector of length greater than 1")
}
for (i in (1:length(x))) {
if (sum(x[i] == x) > 1) {
stop("\n'sides' cannot have duplicated elements")
}
}
return(TRUE)
}
#' @title check probabilitiy
#' @description checks the validity of the argument prob. It should be a numeric vector with more than 1 element, containing number between 0 and 1 and sums to 1
#' @param prob numeric vector with prob values
#' @return returns boolean value of whether given sides are valid prob values
check_prob <- function(x) {
if (length(x) < 2) {
stop("\n'prob' must be a vector of length greater than 1")
}
if (sum(x > 1 | x < 0) > 0) {
stop("\n'prob' must have value between 0 and 1")
}
if (sum(x) != 1) {
stop("\nelements in 'prob' must add up to 1")
}
return(TRUE)
}
#print method for device
#' @export
print.device <- function(x) {
cat('object "device"\n\n')
df <- data.frame(side = x$side, prob = x$prob)
print(df)
invisible(x)
}
#check whether given object has 'device' class
#' @export
is.device <- function(x) {
if (class(x) != "device") {
return(FALSE)
}
else {
return(TRUE)
}
}
dice <- device(sides = c(1,2,3,4,5,6), prob = rep(1/6, 6)
)
dice
#' @title roll
#' @description takes a device and a number of times and return rolls
#' @param x object of class "device"
#' @param times number of times to roll the device (default = 1)
#' @return a list of rolls, sides, prob, total
#' @export
#' @examples
#' device1 <- device()
#'
#' #roll the device 20 times
#' roll20 <- roll(device1, 20)
roll <- function(x, times = 1) {
if (!is.device(x)) {
stop("\n'roll()' requires an object 'device'")
}
check_times(times)
outp <- list(rolls = sample(x$side, size = times, replace = TRUE, prob = x$prob),
sides = x$side,
prob = x$prob,
total = times)
class(outp) <- 'rolls'
outp
}
#check validity of times
check_times <- function(times) {
if (length(times) > 1) {
stop("\n'times' must be a single value")
}
if (mode(times) != "numeric") {
stop("\n'times' must be a numeric value")
}
if (times < 1) {
stop("\n'times' must be a positive number greater than 0")
}
return(TRUE)
}
#print method for toll
#' @export
print.rolls <- function(x) {
cat('object "rolls"\n\n')
print(x$rolls)
invisible(x)
}
roll(device())
roll(device(), 10)
dv <- roll(device(), 10)
dv$sides
dv$prob
dv$total
summary(dv)
dvs <- summary(dv)
dvs$freqs
plot(dv)
dv[2]
dv + 10
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
library(roller)
device()
roll(device())
plot(roll(device()))
library(roller)
device()
roll(device())
plot(roll(device()))
roll(device()) + 10
ro <- roll(device())
ro
ro+10
library(roller)
device()
roller(device())
roll(device())
x <- roll(device(), 10)
x
x[1]
x[1] <- 3
x[1] <- 2
x{1}
x[1]
x
plot(x)
x + 20
plot(x)
plot(x)
x
plot(x+20)
summary(x)
devtools::install(build_vignettes=TRUE)           # install package
if(NA) print('dui')
"\\ba"
"\\ba" = 'a'
"\\ba" == 'a'
"\\ba" == ' a'
"\\ba" == ' a '
"\ba" == ' a '
"\ba" == ' a'
print("^ b")
print("^b$")
print("\\<b$")
print([[:punct:]])
'?' in [[:punct:]]
'?' %in% [[:punct:]]
library(roller)
library(roller)
# default device
device1 <- device()
device1
device1
# roll the device(default time = 1)
roll10 <- roll(device1, 10)
roll10
library(roller)
# default device
device1 <- device()
device1
# roll the device(default time = 1)
roll10 <- roll(device1, 10)
roll10
library(roller)
device()
roll(device())
x = roll(device(), 10)
x
plot(x)
summary(x)
x + 10
x[5]
x[5] <- 2
x[5]
devtools::checK-man()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
ls()
?device
?roll
d = device()
d
r100 = roll(d, 100)
r100
r100+100
r100[1]
summary(r100)
r100[1:10]
