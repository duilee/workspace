str_sub(times, start = -2) == "PM"
times
times <- c('12PM', '10AM', '9AM', '8AM', '2PM')
times
times
str_sub(times, start = -2) == "PM"
hours[str_sub(times, start = -2) == 'PM'] <- 12
hours
times
str_sub(times, start = -2) == "PM"
hours[str_sub(times, start = -2) == 'PM'] <- hours[str_sub(times, start = -2) == 'PM'] + 12
hours
times
str_sub(times, start = -2) == "PM"
times
str_sub(times, start = -2) == "PM"
hours <- as.numeric(str_sub(times, start = 0, end = -3))
hours[str_sub(times, start = -2) == 'PM'] <- hours[str_sub(times, start = -2) == 'PM'] + 12
hours
times
str_sub(times, start = -2) == "PM"
hours <- as.numeric(str_sub(times, start = 0, end = -3))
hours[str_sub(times, start = -2) == 'PM' &
hours == 12] <- hours[str_sub(times, start = -2) == 'PM'] + 12
hours
times
str_sub(times, start = -2) == "PM"
hours <- as.numeric(str_sub(times, start = 0, end = -3))
hours[str_sub(times, start = -2) == 'PM' &
hours !== 12] <- hours[str_sub(times, start = -2) == 'PM'] + 12
times
str_sub(times, start = -2) == "PM"
hours <- as.numeric(str_sub(times, start = 0, end = -3))
hours[str_sub(times, start = -2) == 'PM' &
hours != 12] <- hours[str_sub(times, start = -2) == 'PM'] + 12
hours
times
str_sub(times, start = -2) == "PM"
hours <- as.numeric(str_sub(times, start = 0, end = -3))
hours[str_sub(times, start = -2) == 'PM' &
hours != 12] <- hours[str_sub(times, start = -2) == 'PM' & hours != 12] + 12
hours
times <- c('12PM', '10AM', '9AM', '8AM', '2PM')
start24 <- function(x) {
y <- rep(0, length(x))
for (i in 1:length(x)) {
if (str_sub(x[i], start = -2) == "AM") {
if (as.numeric(str_sub(x[i], start = 0, end = -3)) == 12) {
y[i] = 24
}
else {
y[i] = as.numeric(str_sub(x[i], start = 0, end = -3))
}
}
else {
if (as.numeric(str_sub(x[i], start = 0, end = -3)) == 12) {
y[i] == 12
}
else {
y[i] = as.numeric(str_sub(x[i], start = 0, end = -3)) + 12
}
}
}
return(y)
}
start24(times)
str_sub("12PM", start = 0, end = -3)) == 12)
str_sub(x[i], start = 0, end = -3)) == 12
str_sub(x[i], start = 0, end = -3)) == 12)
as.numeric(str_sub(x[i], start = 0, end = -3)) == 12
as.numeric(str_sub('12PM', start = 0, end = -3)) == 12
str_replace(times, pattern = 'AM|PM', replacement = '')
str_replace(times, pattern = 'AM|PM', replacement = + 12)
str_replace(times, pattern = 'AM|PM', replacement = '')
times <- c('12PM', '10AM', '9AM', '8AM', '2PM')
start24 <- function(x) {
y <- rep(0, length(x))
hours <- str_sub(x, start = 0, end = -3)
period <- str_sub(x, start = -2)
for (i in 1:length(x)) {
if (period[i] == "PM") {
if (hours[i] == 12) {
y[i] = 12
}
else {
y[i] = hours[i] + 12
}
}
else {
if (hours[i] == 12) {
y[i] == 24
}
else {
y[i] = hours[i]
}
}
}
}
start24(times)
times <- c('12PM', '10AM', '9AM', '8AM', '2PM')
start24 <- function(x) {
y <- rep(0, length(x))
hours <- as.numeric(str_sub(x, start = 0, end = -3))
period <- str_sub(x, start = -2)
for (i in 1:length(x)) {
if (period[i] == "PM") {
if (hours[i] == 12) {
y[i] = 12
}
else {
y[i] = hours[i] + 12
}
}
else {
if (hours[i] == 12) {
y[i] == 24
}
else {
y[i] = hours[i]
}
}
}
}
start24(times)
times <- c('12PM', '10AM', '9AM', '8AM', '2PM')
start24 <- function(x) {
y <- rep(0, length(x))
hours <- as.numeric(str_sub(x, start = 0, end = -3))
period <- str_sub(x, start = -2)
for (i in 1:length(x)) {
if (period[i] == "PM") {
if (hours[i] == 12) {
y[i] = 12
}
else {
y[i] = hours[i] + 12
}
}
else {
if (hours[i] == 12) {
y[i] == 24
}
else {
y[i] = hours[i]
}
}
}
return(y)
}
start24(times)
start24(dat$starttime)
times <- c('12PM', '10AM', '9AM', '8AM', '12AM')
start24 <- function(x) {
y <- rep(0, length(x))
hours <- as.numeric(str_sub(x, start = 0, end = -3))
period <- str_sub(x, start = -2)
for (i in 1:length(x)) {
if (period[i] == "PM") {
if (hours[i] == 12) {
y[i] = 12
}
else {
y[i] = hours[i] + 12
}
}
else {
if (hours[i] == 12) {
y[i] == 24
}
else {
y[i] = hours[i]
}
}
}
return(y)
}
start24(times)
times <- c('12PM', '10AM', '9AM', '8AM', '12AM')
start24 <- function(x) {
y <- rep(0, length(x))
hours <- as.numeric(str_sub(x, start = 0, end = -3))
period <- str_sub(x, start = -2)
for (i in 1:length(x)) {
if (period[i] == "PM") {
if (hours[i] == 12) {
y[i] = 12
}
else {
y[i] = hours[i] + 12
}
}
else {
if (hours[i] == 12) {
y[i] = 24
}
else {
y[i] = hours[i]
}
}
}
return(y)
}
start24(times)
start24(dat$starttime)
dat %>% mutate('start' = start24(starttime))
dat
dat <- dat %>% mutate('start' = start24(starttime), 'end' = start24(endtime))
dat <- dat %>% mutate('duration' = end - start)
dat
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(lat_lon, pattern = ',')
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat_lon
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lat <- lapply(lat_lon, function(x) x[1])
lon <- lat <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
dat %>% mutate('lat' = lat, 'lon'  = lon)
dat <- dat %>% mutate('lat' = lat, 'lon'  = lon)
plot(dat$lon, dat$lat, pch = 19, col = "#77777744")
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lat <- lapply(lat_lon, function(x) x[1])
lon <- lat <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lat <- lapply(lat_lon, function(x) x[1])
lon <- lat <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
lon
lat_lon
lat
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
dat <- dat %>% mutate('lat' = lat, 'lon'  = lon)
dat %>% mutate('lat' = lat, 'lon'  = lon)
lat
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
dat %>% mutate('lat' = lat, 'lon'  = lon)
dat %>% mutate('lat' = lat)
loc_all <- dat$Location
loc2 <- str_replace_all(loc_all, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(loc2, pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
lat1 <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
dat %>% mutate('lat' = lat1)
dat <- dat %>% mutate('lat' = lat1, 'lon' = lon)
plot(dat$lon, dat$lat, pch = 19, col = "#77777744")
plot_ly(x = lon, y = lay)
plot_ly(x = lon, y = lat)
plot_ly(x = dat$lon, y = dat$lat)
knitr::opts_chunk$set(echo = TRUE)
plot_ly(data = dat, x = ~lon, y = ~lat, type = 'scatter', mode = 'markers')
# you may need to install the packages
# install.packages("stringr")
# install.packages("plotly")
library(dplyr)
library(stringr)
library(plotly)
plot_ly(data = dat, x = ~lon, y = ~lat, type = 'scatter', mode = 'markers')
install.packages("RgoogleMaps")
library(RgoogleMaps)
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
install.packages("ggmap")
library(ggmap)
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
# let's get rid of rows with missing values
dat <- na.omit(dat)
# ggmap typically asks you for a zoom level,
# but we can try using ggmap's make_bbox function:
sbbox <- make_bbox(lon = dat$lon, lat = dat$lat, f = .1)
sbbox
# get a 'terrain' map
sf_map <- get_map(location = sbbox, maptype = "terrain", source = "google")
ggmap(sf_map) +
geom_point(data = dat,
mapping = aes(x = lon, y = lat),
color = "red", alpha = 0.2, size = 1)
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
foods <- dat$optionaltext[1:10]
foods
str_detect(foods, "Burritos", "burritos")
str_detect(foods, "Burritos")
str_detect(foods, "Burritos") = "burritos"
str_replace(foods, "Burritos", "burritos")
foods
food <- str_replace(foods, "Burritos", "burritos")
str_detect(foods, "burritos")
food <- str_replace(foods, "Burritos", "burritos")
str_detect(foods, "burritos")
food <- str_replace(foods, "Burritos", "burritos")
foods <- str_replace(foods, "Burritos", "burritos")
str_detect(foods, "burritos")
d <- str_detect(foods, "burritos")
dat[d, ]
foods <- dat$optionaltext
foods
foods <- dat$optionaltext
foods <- str_replace(foods, "Burritos", "burritos")
d <- str_detect(foods, "burritos")
newdat <- dat[d, ]
newdat <- dat[d, ]
PlotOnStaticMap(map1, newdat$lat, newdat$lon, col = "#ed4964", pch=20)
substr("123fads", -1, -1)
substr("123fads", -1)
substr("123fads", 1)
substr("123fads", start = 1)
substr("123fads", start = 1, 3)
str_sub("!23123", 1)
library('stringr')
str_sub("!23123", 1)
str_sub("!23123", -1)
str_sub("!23123", -2)
str_sub("!23123", -2, -2)
nchar("123 3")
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
getwd()
setwd('C:/Users/DooDoo/Desktop/Stat133/stat133-fa18/workout02/output')
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
str_detect("werfds", "e")
str_detect("werfdse", "e")
z <- rep(0, 5)
names(z) <- vowels
names(z) <- c('a', 'e', 'i', 'o', 'u')
z['a']
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
y <- c(1)
names(y) <- C("r")
names(y) <- C("df")
names(y) <- c("df")
y['df']
y['df'] = 0
y
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
i in c('1', '3', '4')
for i in c('1', '2', '3')
print(i)
for i in c('1', '2', '3')
print(i)
i
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
library('stringr')
#' @title count_vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return numeric vector with names for vowels
count_vowels <- function(x) {
if (mode(x) != 'character') {
stop("invalid input; a string was expected")
}
y <- tolower(x)
y <- str_split(y, '')
vowels <- c('a', 'e', 'i', 'o', 'u')
z <- rep(0, 5)
names(z) <- vowels
for (i in vowels) {
z[i] = sum((i == y))
}
return(z)
}
count_vowels('erf ertf')
library('stringr')
#' @title count_vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return numeric vector with names for vowels
count_vowels <- function(x) {
if (mode(x) != 'character') {
stop("invalid input; a string was expected")
}
y <- tolower(x)
y <- str_split(y, '')
vowels <- c('a', 'e', 'i', 'o', 'u')
z <- rep(0, 5)
names(z) <- vowels
for (i in vowels) {
print(i)
print(sum((i == y)))
z[i] = sum((i == y))
}
return(z)
}
count_vowels('erf ertf')
library('stringr')
#' @title count_vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return numeric vector with names for vowels
count_vowels <- function(x) {
if (mode(x) != 'character') {
stop("invalid input; a string was expected")
}
y <- tolower(x)
y <- str_split(y, '')
y
vowels <- c('a', 'e', 'i', 'o', 'u')
z <- rep(0, 5)
names(z) <- vowels
for (i in vowels) {
print(i)
print(sum((i == y)))
z[i] = sum((i == y))
}
return(z)
}
count_vowels('erf ertf')
print(y)
library('stringr')
#' @title count_vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return numeric vector with names for vowels
count_vowels <- function(x) {
if (mode(x) != 'character') {
stop("invalid input; a string was expected")
}
y <- tolower(x)
y <- str_split(y, '')
print(y)
vowels <- c('a', 'e', 'i', 'o', 'u')
z <- rep(0, 5)
names(z) <- vowels
for (i in vowels) {
print(i)
print(sum((i == y)))
z[i] = sum((i == y))
}
return(z)
}
count_vowels('erf ertf')
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
